// Code generated by zenrpc; DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc/v2"
	"github.com/semrush/zenrpc/v2/smd"
)

var RPC = struct {
	MetaMask struct{ Multiply, Eth_blockNumber, Net_version, Eth_getBalance, Eth_getBlockByNumber string }
}{
	MetaMask: struct{ Multiply, Eth_blockNumber, Net_version, Eth_getBalance, Eth_getBlockByNumber string }{
		Multiply:             "multiply",
		Eth_blockNumber:      "eth_blocknumber",
		Net_version:          "net_version",
		Eth_getBalance:       "eth_getbalance",
		Eth_getBlockByNumber: "eth_getblockbynumber",
	},
}

func (MetaMask) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Multiply": {
				Description: `Multiply multiples two digits and returns result.`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "a",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "b",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Integer,
				},
			},
			"Eth_blockNumber": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Integer,
				},
			},
			"Net_version": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Integer,
				},
			},
			"Eth_getBalance": {
				Description: ``,
				Parameters: []smd.JSONSchema{
					{
						Name:        "addr",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "blockNumber",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Integer,
				},
			},
			"Eth_getBlockByNumber": {
				Description: ``,
				Parameters: []smd.JSONSchema{
					{
						Name:        "blockNumber",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "filter",
						Optional:    false,
						Description: ``,
						Type:        smd.Boolean,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s MetaMask) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.MetaMask.Multiply:
		var args = struct {
			A int `json:"a"`
			B int `json:"b"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"a", "b"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Multiply(args.A, args.B))

	case RPC.MetaMask.Eth_blockNumber:
		resp.Set(s.Eth_blockNumber())

	case RPC.MetaMask.Net_version:
		resp.Set(s.Net_version())

	case RPC.MetaMask.Eth_getBalance:
		var args = struct {
			Addr        string `json:"addr"`
			BlockNumber int    `json:"blockNumber"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"addr", "blockNumber"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Eth_getBalance(args.Addr, args.BlockNumber))

	case RPC.MetaMask.Eth_getBlockByNumber:
		var args = struct {
			BlockNumber int  `json:"blockNumber"`
			Filter      bool `json:"filter"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"blockNumber", "filter"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Eth_getBlockByNumber(args.BlockNumber, args.Filter))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
